var documenterSearchIndex = {"docs":
[{"location":"#MainPaths.jl","page":"MainPaths.jl","title":"MainPaths.jl","text":"","category":"section"},{"location":"","page":"MainPaths.jl","title":"MainPaths.jl","text":"Documentation for MainPaths.jl","category":"page"},{"location":"","page":"MainPaths.jl","title":"MainPaths.jl","text":"Modules = [MainPaths]\nOrder   = [:function, :type]","category":"page"},{"location":"#MainPaths.bfs_multi-Union{Tuple{T}, Tuple{LightGraphs.AbstractGraph{T}, Any, Function}} where T","page":"MainPaths.jl","title":"MainPaths.bfs_multi","text":"bfs_multi(g, source, neighborfn)\n\nTraverse graph g starting at vertices source and choosing neighbors  to visit according to neighborfn.\n\nThis is a modified breadth-first search traversal algorithm where instances of  a vertex being visited multiple times by different parents are recorded.  This function was modified from the LightGraphs bfs algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.emax_inneighbors-Union{Tuple{T}, Tuple{S}, Tuple{U}, Tuple{LightGraphs.AbstractGraph{T}, S, AbstractMatrix{U}}} where {U<:Real, S, T<:Integer}","page":"MainPaths.jl","title":"MainPaths.emax_inneighbors","text":"emax_inneighbors(g, v, w)\n\nObtain an array with the outneighbor(s) of vertex v that are connected with the  maximum weight edge in terms of edgeweight w. \n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.emax_outneighbors-Union{Tuple{T}, Tuple{S}, Tuple{U}, Tuple{LightGraphs.AbstractGraph{T}, S, AbstractMatrix{U}}} where {U<:Real, S, T<:Integer}","page":"MainPaths.jl","title":"MainPaths.emax_outneighbors","text":"emax_outneighbors(g, v, w)\n\nObtain an array with the outneighbor(s) of vertex v that are connected with the  maximum weight edge in terms of edgeweight w.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.genetic_knowper-Union{Tuple{LightGraphs.AbstractGraph{T}}, Tuple{T}} where T<:Integer","page":"MainPaths.jl","title":"MainPaths.genetic_knowper","text":"genetic_knowper(g, normalize=:none)\n\nCompute the genetic knowledge persistence scores for all nodes in g. \n\nThis is a modified version of the method proposed in Martinelli & Nomaler (2014)  where citations from future patents to patents before the curent layer are not ignored in the persistence computation.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.mainpath-Union{Tuple{T}, Tuple{LightGraphs.AbstractGraph{T}, Vector{T}, AbstractMatrix{var\"#s4\"} where var\"#s4\"<:Real, FBMP}} where T<:Integer","page":"MainPaths.jl","title":"MainPaths.mainpath","text":"mainpath(g, start, weights::Matrix{<:Real}, FBMP())\n\nCompute the main path or main path network for graph g, traversing both forward and  backward starting at nodes start and using edge weights given as matrix weights  for neighbor selection during traversal.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.mainpath-Union{Tuple{T}, Tuple{LightGraphs.AbstractGraph{T}, Vector{T}, Vector{var\"#s18\"} where var\"#s18\"<:Real, FBMP}} where T<:Integer","page":"MainPaths.jl","title":"MainPaths.mainpath","text":"mainpath(g, start, weights::Vector{<:Real}, FBMP())\n\nCompute the main path or network of main paths for graph g, traversing both forward and  backward starting at nodes start and using node weights given as vector weights  for neighbor selection during traversal.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.vmax_inneighbors-Union{Tuple{T}, Tuple{S}, Tuple{U}, Tuple{LightGraphs.AbstractGraph{T}, S, AbstractVector{U}}} where {U<:Real, S, T<:Integer}","page":"MainPaths.jl","title":"MainPaths.vmax_inneighbors","text":"vmax_inneighbors(g, v, w)\n\nObtain an array with the inneighbor(s) of vertex v that score highest  in terms of vertex weights w.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.vmax_outneighbors-Union{Tuple{T}, Tuple{S}, Tuple{U}, Tuple{LightGraphs.AbstractGraph{T}, S, AbstractVector{U}}} where {U<:Real, S, T<:Integer}","page":"MainPaths.jl","title":"MainPaths.vmax_outneighbors","text":"vmax_outneighbors(g, v, w)\n\nObtain an array with the outneighbor(s) of vertex v that score highest  in terms of vertex weights w.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.weights_spc-Union{Tuple{LightGraphs.AbstractGraph{T}}, Tuple{T}} where T<:Integer","page":"MainPaths.jl","title":"MainPaths.weights_spc","text":"weights_spc(g, normalize=false)\n\nCompute the Search Path Count (SPC) weights for graph g as described in Batagelj (2003). The function returns a vector with edgeweights, a vector with vertex weights and the total flow. When normalize is set to true, edge weigths and vertex weights are divided by total flow.\n\n\n\n\n\n","category":"method"},{"location":"#MainPaths.FBMP","page":"MainPaths.jl","title":"MainPaths.FBMP","text":"Struct representing a forward-backward main path traversal.  This doesn't contain any information but is used for dispatch in the mainpath() methods. \n\n\n\n\n\n","category":"type"}]
}
